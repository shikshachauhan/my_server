
class RecordingsController < ApplicationController #1
    def upload #2
      gcmid = params[:gcmid]
      if !gcmid.present? or !caller_ids.present? or if reason is there
              render json: { message: 'GCM ID not present! Failure!'}, status: 403
              message = "GCM ID not present! Failure!"
              
      end
      caller_ids = params[:caller_ids]
      if !caller_ids.present? #5 if reason is there
              render json: { message: 'Phone numbers not present! Failure!'}, status: 403
              message = "Phone numbers not present! Failure!"
              push_gcm(gcmid,message)
      end
      file = params[:uploadedfile]
      if !gcmid.present? #5 if reason is there
              render json: { message: 'GCM ID not present! Failure!'}, status: 403
              message = "GCM ID not present! Failure!"
              push_gcm(gcmid,message)
      end      
      #gcmid = "APA91bEB6mlOrCLLjGPUPQeDfV1yKirE1hAsUKgNHFb6Qw4h21bqn3ySMohZRnxJLqC8it-T04ssUjy_V11BO18Tp77Pe4ts2Eoh-5OtvYeaCFL24hklREw"
      #caller_ids = "9718658816,8826533273"
      #name = params[:filename]
      #name = "audio.mp3"
      puts gcmid
      puts "1"
      name = params[:uploadedfile].original_filename

      puts name  
      directory = "/home/myvoice/project/my_server/Recordings/"
      path = File.join(directory, name)
      File.open(path, "wb") { |f| f.write(params[:uploadedfile].read) }
      puts "2"
      flash[:notice] = "File uploaded"
      #redirect_to "/upload/new"

=begin
      target = open(path, 'w')
      target.write(file)
      target.close
=end
      #puts file
      puts caller_ids
      #puts filename
      puts "here"
      
      admin = Admin.where(gcmid: gcmid).first  #Find the admin who has launched the message
      if admin #8
        #Create Schedule
        response = RestClient.post("#{@gv_ip}/vapp/api/v1/schedule/create/?api_key=38dc9ea2dc8878b8ac674b3baef02d1973de5362&username=preeti&format=json", ai: 10, message_id: 8, group_id: 37, name: name, start_time: "08:00:00", end_time: "21:00:00", is_repeated: "true", days_to_repeat: "0,1,2,3,4,5,6", is_active: "false",is_play_ai: "true")
        #Find response by running the API
        #response = {:id=> 122}
        #response = response.to_json
	puts "here2"
        response = JSON.parse(response.body)
	puts "here3"
        puts response

        if response == nil #3 if response is NULL means user is unauthorized to get the response
          render json: { message: 'Unauthorized!' }, status: 401
          message = "Unauthorized!"
          push_gcm(gcmid,message)
        else  #3 else if not null (MUltiple cases)
          if response['id'] #4 if id is there in the response , means created the schedule
            @rec = Recording.create(MemberId: admin.id, RecFileName: name, Status: 'Created', GVID: response['id'])
	    puts "here4"            
	    @task = Task.create(ItemId: @rec.id, TaskName: 'CreateRecording', Status: 'Created', MemberId: admin.id,GVID: response['id'], Type: 'Recording', Contacts: caller_ids) 
	    puts "here5"            
	    @task = Task.create(ItemId: @rec.id, TaskName: 'DialoutRecording', Status: 'Pending', MemberId: admin.id, Type: 'Recording',GVID: response['id'], Contacts: caller_ids) 
            puts "here6"
	    render json: { message: 'Recording Schedule created successfully!' }, status: 200
            message = "Recording Schedule created successfully"
            push_gcm(gcmid,message)
            #put in delivered task queue

          else #4 if objects are not there
            if response['error'] #5 if reason is there
              render json: { message: 'Request not accepted! Parameters incorrect! Failure!'}, status: 403
              message = "Request not accepted! Parameters incorrect! Failure!"
              push_gcm(gcmid,message)
                
            else #5 if reason is not there
              if response.code.to_i == 500 and response.body == "Internal Server Error" #6 if server error is there
                @rec = Recording.create(MemberId: admin.id, RecId: response['id'], RecFileName: name, Status: 'PendingCreate', GVID: response['id'])
                @task = Task.create(ItemId: @rec.id, TaskName: 'CreateRecording', Status: 'PendingCreate', MemberId: admin.id, Type: 'Recording', Contacts: caller_ids) 
                render json: { message: 'Internal Server Error! Server is down!'}, status: 500
                message = "Internal Server Error! Server is down!"
                push_gcm(gcmid,message)            
                #Put in Pending Task queue

              end #6
            end #5
          end #4
        end #3
      else #8
        render json: { message: 'Not an Authorized Admin!' }, status: 401
        message = "Not an Authorized Admin!"
        push_gcm(gcmid,message)  
      end #8
        
        #run schedule


    end #2
end #1


=begin
    # debugger
    # params give you all the parameters in request
	# 'data' for us will come from params[:uploaded_file]
    data = params[:uploadedfile]
    #caller_ids = params[:caller_ids]
	#filename = data.original_filename
	filename = "standard.mp3"
	target = open(filename, 'w')
	target.write(data)
	target.close
		if data
	      # uploading on gramvani
          container_object  = Net::HTTP.new('internal.gramvaani.org', 8080).request(Net::HTTP::Post.new('/vapp/api/v1/mnews_news/create_new_item/?ai_id=60&channel_id=5&title=surbhi&api_key=38dc9ea2dc8878b8ac674b3baef02d1973de5362&username=preeti&format=json'))
          container_object = JSON.parse(container_object.body)
          response_object = RestClient.post("http://internal.gramvaani.org:8080/vapp/api/v1/mnews_news/upload_audio/?ai_id=352&news_id=#{container_object['id']}&api_key=38dc9ea2dc8878b8ac674b3baef02d1973de5362&username=preeti&format=json", audio_file: File.new(filename))#File.new('/Users/shikshachauhan/Downloads/standard.mp3')
          response_object = JSON.parse(response_object)  
          puts container_object
          puts response_object
          @Rec = Recording.create(MemberId: @admin.id, RecFileName: filename, Status: "Pending", GVID: response_object['id'])
          @Task = Task.create(ItemId: @Rec.id, TaskName: "Publish Recording", Status: "Publish Pending", MemberId: @Rec.MemberId, GVID: @Rec.GVID)
          render json: { message: 'File uploaded successfully' }, status: 200
	         
        else
	      render json: { message: 'File not correct' }, status: 403
	    end
	# write the file
    #File.open(path, "wb") { |f| f.write(params[:data].read) }
=end
	 
